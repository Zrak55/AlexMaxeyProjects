//====Password Cracker Readme=====//

The goal of this project was to examine the potential runtime of a true brute force password cracker.
Normal brute-force crackers take input from a list of potential passwords, generated by what a password most likely is.
This project takes brute force to its simplest, examining every possible password based on a maximum length and a set of possbile characters in the password.
The program accepts input from the user to set possible characters and the maximum password length.
A random password of length 1-max is generated, each character being a random possible character in the string of acceptable characters.
When prompted, the program will crack the password based on the accepted settings.  The time required to crack will be displayed when it is found.

I've always been told it, and it's just simple math: a true brute force will take a LONG time to crack any half decent password.  However,
curiosity got the better of me, and I wanted to see it for myself.  In creating this project, I learned that having information about a password
is critically important.  The time difference between cracking a password with 26 potential characters and 62 potential characters is substantial.
The longest test I ran with this program was a password up to 10 characters with 9 characters as valid inputs.  Not surprisingly, it took quite a while 
to finish.  My recoreded times for this case were 8h2m7s and 49h47m43s.  The latter case is more indicative of the average, as it was closer to the halfway
point of checking all possible passwords.

It also became clear as to why phishing has become such a common form of attack lately.  The computational time and energy required to crack a
password in this method, even if I had implemented a smarter brute force check (ex: ignore abc123), is simply not reasonable.  Getting the user
to offer up their password willingly saves valuable time and energy.
